import type { ShopifyOrder } from '@/types/shopify';

interface PrintContentProps {
  order: ShopifyOrder;
}

export function generatePrintContent({ order }: PrintContentProps): string {
  return `
    <!DOCTYPE html>
    <html>
      <head>
        <title>Bordereau ${order.name}</title>
        <style>
          @page {
            size: A4;
            margin: 20mm;
          }
          body {
            font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
            padding: 40px;
            max-width: 210mm;
            margin: 0 auto;
          }
          .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
          }
          .item {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px solid #eee;
            page-break-inside: avoid;
          }
          .variants {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
          }
          .variant {
            display: flex;
            align-items: center;
            gap: 5px;
          }
          .logo {
            width: 200px;
            margin-bottom: 20px;
            object-fit: contain;
          }
          .footer {
            margin-top: 40px;
            text-align: justify;
            font-size: 12px;
            color: #666;
            line-height: 1.5;
          }
        </style>
      </head>
      <body>
        <div class="print-content">
          <img src="/images/runesdechene-invoice.png" alt="Runes de chÃªne" class="logo" />
          <div class="header">
            <h2>Bordereau de commande</h2>
            <div>NÂ° ${order.name}</div>
          </div>
          <div>
            <p>Date: ${new Date(order.createdAt).toLocaleDateString('fr-FR')}</p>
          </div>
          <div>
            <h3>Articles</h3>
            ${order.lineItems?.map(item => {
              if (item.isCancelled) return '';
              
              const variants = Array.from({ length: item.quantity }).map(() => {
                const color = item.variantTitle?.split(' / ')[0] || '';
                const size = item.variantTitle?.split(' / ')[1] || '';
                return { color, size };
              });

              return `
                <div class="item">
                  <div><strong>${item.title}</strong></div>
                  <div class="variants">
                    ${variants.map(variant => `
                      <div class="variant">
                        <span>${variant.color} / ${variant.size}</span>
                      </div>
                    `).join('')}
                  </div>
                </div>
              `;
            }).join('') || ''}
          </div>
          <div class="footer">
            <p>
            Cette commande fut imprimÃ©e en flux tendu, ce qui explique son dÃ©lai plus long.
            Cette mÃ©thode nous permet de garantir un large choix de couleurs, de tailles et de motif, tout en rÃ©duisant Ã  nÃ©ant
            le gachis textile et le sur-stockage. Nous savons qu'Ã  l'heure des livraisons immÃ©diates, ce type de 
            commande peut Ãªtre parfois mal perÃ§u, mais nous le trouvons plus humain et plus Ã©cologique. Nous vous remercions donc pour votre patience et votre confiance. ðŸŽ‰
            </p>
          </div>
        </div>
      </body>
    </html>
  `;
}
